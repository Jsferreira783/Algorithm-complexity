#include <iostream>
#include <vector>
#include <chrono>

using namespace std;
using namespace std::chrono;

// Bubble Sort function
void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

// Merge function for Merge Sort
void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    
    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; i++) L[i] = arr[left + i];
    for (int i = 0; i < n2; i++) R[i] = arr[mid + 1 + i];
    
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
    }
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

// Merge Sort function
void mergeSort(vector<int>& arr, int left, int right) {
    if (left >= right) return;
    int mid = left + (right - left) / 2;
    mergeSort(arr, left, mid);
    mergeSort(arr, mid + 1, right);
    merge(arr, left, mid, right);
}

int main() {
    int N;
    cout << "Enter number of delivery times: ";
    cin >> N;

    vector<int> deliveryTimes(N);
    cout << "Enter the delivery times (in minutes):\n";
    for (int i = 0; i < N; i++) {
        cin >> deliveryTimes[i];
    }

    // Bubble Sort
    vector<int> bubbleSortedTimes = deliveryTimes;
    auto start = high_resolution_clock::now();
    bubbleSort(bubbleSortedTimes);
    auto end = high_resolution_clock::now();
    auto bubbleDuration = duration_cast<microseconds>(end - start);

    cout << "Sorted delivery times using Bubble Sort: ";
    for (int time : bubbleSortedTimes) {
        cout << time << " ";
    }
    cout << endl;
    cout << "Bubble Sort Time: " << bubbleDuration.count() << " microseconds\n";
    cout << "Bubble Sort Time Complexity: O(N^2)\n";

    // Merge Sort
    vector<int> mergeSortedTimes = deliveryTimes;
    start = high_resolution_clock::now();
    mergeSort(mergeSortedTimes, 0, N - 1);
    end = high_resolution_clock::now();
    auto mergeDuration = duration_cast<microseconds>(end - start);

    cout << "Sorted delivery times using Merge Sort: ";
    for (int time : mergeSortedTimes) {
        cout << time << " ";
    }
    cout << endl;
    cout << "Merge Sort Time: " << mergeDuration.count() << " microseconds\n";
    cout << "Merge Sort Time Complexity: O(N log N)\n";

    return 0;
}
